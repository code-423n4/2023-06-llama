INFO:Detectors:
LlamaExecutor.execute(address,uint256,bool,bytes) (src/LlamaExecutor.sol#29-35) uses delegatecall to a input-controlled function id
	- (success,result) = target.delegatecall(data) (src/LlamaExecutor.sol#34)
LlamaAccount.execute(address,bool,bytes) (src/accounts/LlamaAccount.sol#297-331) uses delegatecall to a input-controlled function id
	- (success,result) = target.delegatecall(callData) (src/accounts/LlamaAccount.sol#323)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall
INFO:Detectors:
LlamaPolicy._assertNoActionCreationsAtCurrentTimestamp() (src/LlamaPolicy.sol#404-409) uses a dangerous strict equality:
	- lastActionCreation == block.timestamp (src/LlamaPolicy.sol#408)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Contract locking ether found:
	Contract LlamaCore (src/LlamaCore.sol#20-803) has payable functions:
	 - LlamaCore.executeAction(ActionInfo) (src/LlamaCore.sol#317-343)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether
INFO:Detectors:
Reentrancy in LlamaCore._castApproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#565-573):
	External calls:
	- (action,quantity) = _preCastAssertions(actionInfo,policyholder,role,ActionState.Active) (src/LlamaCore.sol#568)
		- actionInfo.strategy.isApprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#605)
		- actionInfo.strategy.isDisapprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#609)
	State variables written after the call(s):
	- approvals[actionInfo.id][policyholder] = true (src/LlamaCore.sol#571)
	LlamaCore.approvals (src/LlamaCore.sol#189) can be used in cross function reentrancies:
	- LlamaCore._castApproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#565-573)
	- LlamaCore._preCastAssertions(ActionInfo,address,uint8,ActionState) (src/LlamaCore.sol#587-613)
	- LlamaCore.approvals (src/LlamaCore.sol#189)
Reentrancy in LlamaCore._castDisapproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#576-584):
	External calls:
	- (action,quantity) = _preCastAssertions(actionInfo,policyholder,role,ActionState.Queued) (src/LlamaCore.sol#579)
		- actionInfo.strategy.isApprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#605)
		- actionInfo.strategy.isDisapprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#609)
	State variables written after the call(s):
	- disapprovals[actionInfo.id][policyholder] = true (src/LlamaCore.sol#582)
	LlamaCore.disapprovals (src/LlamaCore.sol#192) can be used in cross function reentrancies:
	- LlamaCore._castDisapproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#576-584)
	- LlamaCore._preCastAssertions(ActionInfo,address,uint8,ActionState) (src/LlamaCore.sol#587-613)
	- LlamaCore.disapprovals (src/LlamaCore.sol#192)
Reentrancy in LlamaCore._createAction(address,uint8,ILlamaStrategy,address,uint256,bytes,string) (src/LlamaCore.sol#516-562):
	External calls:
	- strategy.validateActionCreation(actionInfo) (src/LlamaCore.sol#545)
	- guard.validateActionCreation(actionInfo) (src/LlamaCore.sol#550)
	State variables written after the call(s):
	- actionsCount = LlamaUtils.uncheckedIncrement(actionsCount) (src/LlamaCore.sol#559)
	LlamaCore.actionsCount (src/LlamaCore.sol#186) can be used in cross function reentrancies:
	- LlamaCore._createAction(address,uint8,ILlamaStrategy,address,uint256,bytes,string) (src/LlamaCore.sol#516-562)
	- LlamaCore.actionsCount (src/LlamaCore.sol#186)
	- LlamaCore.getLastActionTimestamp() (src/LlamaCore.sol#478-480)
Reentrancy in LlamaCore.cancelAction(ActionInfo) (src/LlamaCore.sol#348-358):
	External calls:
	- actionInfo.strategy.validateActionCancelation(actionInfo,msg.sender) (src/LlamaCore.sol#354)
	State variables written after the call(s):
	- action.canceled = true (src/LlamaCore.sol#356)
	LlamaCore.actions (src/LlamaCore.sol#169) can be used in cross function reentrancies:
	- LlamaCore._createAction(address,uint8,ILlamaStrategy,address,uint256,bytes,string) (src/LlamaCore.sol#516-562)
	- LlamaCore._preCastAssertions(ActionInfo,address,uint8,ActionState) (src/LlamaCore.sol#587-613)
	- LlamaCore.cancelAction(ActionInfo) (src/LlamaCore.sol#348-358)
	- LlamaCore.executeAction(ActionInfo) (src/LlamaCore.sol#317-343)
	- LlamaCore.getAction(uint256) (src/LlamaCore.sol#471-473)
	- LlamaCore.getActionState(ActionInfo) (src/LlamaCore.sol#485-508)
	- LlamaCore.getLastActionTimestamp() (src/LlamaCore.sol#478-480)
	- LlamaCore.queueAction(ActionInfo) (src/LlamaCore.sol#304-313)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
LlamaPolicy._setRoleHolder(uint8,address,uint128,uint64) (src/LlamaPolicy.sol#431-487) ignores return value by roleBalanceCkpts[tokenId][role].push(quantity,expiration) (src/LlamaPolicy.sol#448)
LlamaPolicy._setRoleHolder(uint8,address,uint128,uint64) (src/LlamaPolicy.sol#431-487) ignores return value by roleBalanceCkpts[tokenId][role].push(0,expiration) (src/LlamaPolicy.sol#448)
LlamaPolicy._mint(address) (src/LlamaPolicy.sol#504-516) ignores return value by roleBalanceCkpts[tokenId][ALL_HOLDERS_ROLE].push(1) (src/LlamaPolicy.sol#515)
LlamaPolicy._burn(uint256) (src/LlamaPolicy.sol#519-530) ignores return value by roleBalanceCkpts[tokenId][ALL_HOLDERS_ROLE].push(0) (src/LlamaPolicy.sol#529)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
LlamaExecutor.execute(address,uint256,bool,bytes).target (src/LlamaExecutor.sol#29) lacks a zero-check on :
		- (success,result) = target.delegatecall(data) (src/LlamaExecutor.sol#34)
		- (success,result) = target.call{value: value}(data) (src/LlamaExecutor.sol#34)
LlamaLens.constructor(address)._llamaFactory (src/LlamaLens.sol#37) lacks a zero-check on :
		- LLAMA_FACTORY = _llamaFactory (src/LlamaLens.sol#38)
LlamaPolicy.finalizeInitialization(address,bytes32)._llamaExecutor (src/LlamaPolicy.sol#180) lacks a zero-check on :
		- llamaExecutor = _llamaExecutor (src/LlamaPolicy.sol#183)
LlamaAccount.execute(address,bool,bytes).target (src/accounts/LlamaAccount.sol#297) lacks a zero-check on :
		- (success,result) = target.delegatecall(callData) (src/accounts/LlamaAccount.sol#323)
		- (success,result) = target.call{value: msg.value}(callData) (src/accounts/LlamaAccount.sol#326)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
LlamaPolicy._assertNoActionCreationsAtCurrentTimestamp() (src/LlamaPolicy.sol#404-409) has external calls inside a loop: llamaCore = LlamaExecutor(llamaExecutor).LLAMA_CORE() (src/LlamaPolicy.sol#406)
LlamaPolicy._assertNoActionCreationsAtCurrentTimestamp() (src/LlamaPolicy.sol#404-409) has external calls inside a loop: lastActionCreation = LlamaCore(llamaCore).getLastActionTimestamp() (src/LlamaPolicy.sol#407)
LlamaAccount.transferERC721(LlamaAccount.ERC721Data) (src/accounts/LlamaAccount.sol#198-201) has external calls inside a loop: erc721Data.token.transferFrom(address(this),erc721Data.recipient,erc721Data.tokenId) (src/accounts/LlamaAccount.sol#200)
LlamaAccount.approveERC721(LlamaAccount.ERC721Data) (src/accounts/LlamaAccount.sol#214-216) has external calls inside a loop: erc721Data.token.approve(erc721Data.recipient,erc721Data.tokenId) (src/accounts/LlamaAccount.sol#215)
LlamaAccount.approveOperatorERC721(LlamaAccount.ERC721OperatorData) (src/accounts/LlamaAccount.sol#229-231) has external calls inside a loop: erc721OperatorData.token.setApprovalForAll(erc721OperatorData.recipient,erc721OperatorData.approved) (src/accounts/LlamaAccount.sol#230)
LlamaAccount.batchTransferSingleERC1155(LlamaAccount.ERC1155BatchData) (src/accounts/LlamaAccount.sol#255-264) has external calls inside a loop: erc1155BatchData.token.safeBatchTransferFrom(address(this),erc1155BatchData.recipient,erc1155BatchData.tokenIds,erc1155BatchData.amounts,erc1155BatchData.data) (src/accounts/LlamaAccount.sol#257-263)
LlamaAccount.approveOperatorERC1155(LlamaAccount.ERC1155OperatorData) (src/accounts/LlamaAccount.sol#277-279) has external calls inside a loop: erc1155OperatorData.token.setApprovalForAll(erc1155OperatorData.recipient,erc1155OperatorData.approved) (src/accounts/LlamaAccount.sol#278)
LlamaGovernanceScript.aggregate(address[],bytes[]) (src/llama-scripts/LlamaGovernanceScript.sol#62-79) has external calls inside a loop: (success,response) = targets[i].call(data[i]) (src/llama-scripts/LlamaGovernanceScript.sol#75)
LlamaGovernanceScript.initializeRoles(RoleDescription[]) (src/llama-scripts/LlamaGovernanceScript.sol#175-181) has external calls inside a loop: policy.initializeRole(description[i]) (src/llama-scripts/LlamaGovernanceScript.sol#179)
LlamaGovernanceScript.setRoleHolders(RoleHolderData[]) (src/llama-scripts/LlamaGovernanceScript.sol#183-194) has external calls inside a loop: policy.setRoleHolder(_setRoleHolders[i].role,_setRoleHolders[i].policyholder,_setRoleHolders[i].quantity,_setRoleHolders[i].expiration) (src/llama-scripts/LlamaGovernanceScript.sol#187-192)
LlamaGovernanceScript.setRolePermissions(RolePermissionData[]) (src/llama-scripts/LlamaGovernanceScript.sol#196-204) has external calls inside a loop: policy.setRolePermission(_setRolePermissions[i].role,_setRolePermissions[i].permissionId,_setRolePermissions[i].hasPermission) (src/llama-scripts/LlamaGovernanceScript.sol#200-202)
LlamaGovernanceScript.revokePolicies(address[]) (src/llama-scripts/LlamaGovernanceScript.sol#208-213) has external calls inside a loop: policy.revokePolicy(_revokePolicies[i]) (src/llama-scripts/LlamaGovernanceScript.sol#211)
LlamaGovernanceScript.updateRoleDescriptions(LlamaGovernanceScript.UpdateRoleDescription[]) (src/llama-scripts/LlamaGovernanceScript.sol#215-220) has external calls inside a loop: policy.updateRoleDescription(roleDescriptions[i].role,roleDescriptions[i].description) (src/llama-scripts/LlamaGovernanceScript.sol#218)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in LlamaCore._createAction(address,uint8,ILlamaStrategy,address,uint256,bytes,string) (src/LlamaCore.sol#516-562):
	External calls:
	- strategy.validateActionCreation(actionInfo) (src/LlamaCore.sol#545)
	- guard.validateActionCreation(actionInfo) (src/LlamaCore.sol#550)
	State variables written after the call(s):
	- newAction.infoHash = _infoHash(actionId,policyholder,role,strategy,target,value,data) (src/LlamaCore.sol#554)
	- newAction.creationTime = LlamaUtils.toUint64(block.timestamp) (src/LlamaCore.sol#555)
	- newAction.isScript = authorizedScripts[target] (src/LlamaCore.sol#556)
Reentrancy in LlamaFactory._deploy(string,ILlamaStrategy,ILlamaAccount,bytes[],bytes[],RoleDescription[],RoleHolderData[],RolePermissionData[]) (src/LlamaFactory.sol#227-264):
	External calls:
	- policy.initialize(name,initialRoleDescriptions,initialRoleHolders,initialRolePermissions) (src/LlamaFactory.sol#251)
	- bootstrapPermissionId = llamaCore.initialize(name,policy,strategyLogic,accountLogic,initialStrategies,initialAccounts) (src/LlamaFactory.sol#254-255)
	- policy.finalizeInitialization(address(llamaExecutor),bootstrapPermissionId) (src/LlamaFactory.sol#258)
	State variables written after the call(s):
	- llamaCount = LlamaUtils.uncheckedIncrement(llamaCount) (src/LlamaFactory.sol#263)
Reentrancy in LlamaCore._deployStrategies(ILlamaStrategy,bytes[]) (src/LlamaCore.sol#625-644):
	External calls:
	- strategy.initialize(strategyConfigs[i]) (src/LlamaCore.sol#639)
	State variables written after the call(s):
	- strategies[strategy] = true (src/LlamaCore.sol#640)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in LlamaCore._castApproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#565-573):
	External calls:
	- (action,quantity) = _preCastAssertions(actionInfo,policyholder,role,ActionState.Active) (src/LlamaCore.sol#568)
		- actionInfo.strategy.isApprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#605)
		- actionInfo.strategy.isDisapprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#609)
	Event emitted after the call(s):
	- ApprovalCast(actionInfo.id,policyholder,role,quantity,reason) (src/LlamaCore.sol#572)
Reentrancy in LlamaCore._castDisapproval(address,uint8,ActionInfo,string) (src/LlamaCore.sol#576-584):
	External calls:
	- (action,quantity) = _preCastAssertions(actionInfo,policyholder,role,ActionState.Queued) (src/LlamaCore.sol#579)
		- actionInfo.strategy.isApprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#605)
		- actionInfo.strategy.isDisapprovalEnabled(actionInfo,policyholder,role) (src/LlamaCore.sol#609)
	Event emitted after the call(s):
	- DisapprovalCast(actionInfo.id,policyholder,role,quantity,reason) (src/LlamaCore.sol#583)
Reentrancy in LlamaCore._createAction(address,uint8,ILlamaStrategy,address,uint256,bytes,string) (src/LlamaCore.sol#516-562):
	External calls:
	- strategy.validateActionCreation(actionInfo) (src/LlamaCore.sol#545)
	- guard.validateActionCreation(actionInfo) (src/LlamaCore.sol#550)
	Event emitted after the call(s):
	- ActionCreated(actionId,policyholder,role,strategy,target,value,data,description) (src/LlamaCore.sol#561)
Reentrancy in LlamaFactory._deploy(string,ILlamaStrategy,ILlamaAccount,bytes[],bytes[],RoleDescription[],RoleHolderData[],RolePermissionData[]) (src/LlamaFactory.sol#227-264):
	External calls:
	- policy.initialize(name,initialRoleDescriptions,initialRoleHolders,initialRolePermissions) (src/LlamaFactory.sol#251)
	- bootstrapPermissionId = llamaCore.initialize(name,policy,strategyLogic,accountLogic,initialStrategies,initialAccounts) (src/LlamaFactory.sol#254-255)
	- policy.finalizeInitialization(address(llamaExecutor),bootstrapPermissionId) (src/LlamaFactory.sol#258)
	Event emitted after the call(s):
	- LlamaInstanceCreated(llamaCount,name,address(llamaCore),address(llamaExecutor),address(policy),block.chainid) (src/LlamaFactory.sol#260-262)
Reentrancy in LlamaCore._deployAccounts(ILlamaAccount,bytes[]) (src/LlamaCore.sol#648-662):
	External calls:
	- account.initialize(accountConfigs[i]) (src/LlamaCore.sol#659)
	Event emitted after the call(s):
	- AccountCreated(account,llamaAccountLogic,accountConfigs[i]) (src/LlamaCore.sol#660)
Reentrancy in LlamaCore._deployStrategies(ILlamaStrategy,bytes[]) (src/LlamaCore.sol#625-644):
	External calls:
	- strategy.initialize(strategyConfigs[i]) (src/LlamaCore.sol#639)
	Event emitted after the call(s):
	- StrategyCreated(strategy,llamaStrategyLogic,strategyConfigs[i]) (src/LlamaCore.sol#641)
Reentrancy in LlamaCore.cancelAction(ActionInfo) (src/LlamaCore.sol#348-358):
	External calls:
	- actionInfo.strategy.validateActionCancelation(actionInfo,msg.sender) (src/LlamaCore.sol#354)
	Event emitted after the call(s):
	- ActionCanceled(actionInfo.id) (src/LlamaCore.sol#357)
Reentrancy in LlamaCore.executeAction(ActionInfo) (src/LlamaCore.sol#317-343):
	External calls:
	- guard.validatePreActionExecution(actionInfo) (src/LlamaCore.sol#330)
	- (success,result) = executor.execute(actionInfo.target,actionInfo.value,action.isScript,actionInfo.data) (src/LlamaCore.sol#333-334)
	- guard.validatePostActionExecution(actionInfo) (src/LlamaCore.sol#339)
	Event emitted after the call(s):
	- ActionExecuted(actionInfo.id,msg.sender,actionInfo.strategy,actionInfo.creator,result) (src/LlamaCore.sol#342)
Reentrancy in LlamaCore.initialize(string,LlamaPolicy,ILlamaStrategy,ILlamaAccount,bytes[],bytes[]) (src/LlamaCore.sol#224-243):
	External calls:
	- bootstrapStrategy = _deployStrategies(_llamaStrategyLogic,initialStrategies) (src/LlamaCore.sol#237)
		- strategy.initialize(strategyConfigs[i]) (src/LlamaCore.sol#639)
	- _deployAccounts(_llamaAccountLogic,initialAccounts) (src/LlamaCore.sol#238)
		- account.initialize(accountConfigs[i]) (src/LlamaCore.sol#659)
	Event emitted after the call(s):
	- AccountCreated(account,llamaAccountLogic,accountConfigs[i]) (src/LlamaCore.sol#660)
		- _deployAccounts(_llamaAccountLogic,initialAccounts) (src/LlamaCore.sol#238)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
LlamaCore.queueAction(ActionInfo) (src/LlamaCore.sol#304-313) uses timestamp for comparisons
	Dangerous comparisons:
	- minExecutionTime < block.timestamp (src/LlamaCore.sol#310)
LlamaCore.executeAction(ActionInfo) (src/LlamaCore.sol#317-343) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < action.minExecutionTime (src/LlamaCore.sol#323)
LlamaPolicy.isRoleExpired(address,uint8) (src/LlamaPolicy.sol#324-327) uses timestamp for comparisons
	Dangerous comparisons:
	- quantity > 0 && block.timestamp > expiration (src/LlamaPolicy.sol#326)
LlamaPolicy._assertNoActionCreationsAtCurrentTimestamp() (src/LlamaPolicy.sol#404-409) uses timestamp for comparisons
	Dangerous comparisons:
	- lastActionCreation == block.timestamp (src/LlamaPolicy.sol#408)
LlamaPolicy._assertValidRoleHolderUpdate(uint8,uint128,uint64) (src/LlamaPolicy.sol#412-428) uses timestamp for comparisons
	Dangerous comparisons:
	- case1 = quantity > 0 && expiration > block.timestamp (src/LlamaPolicy.sol#425)
	- ! (case1 || case2) (src/LlamaPolicy.sol#427)
LlamaAbsoluteStrategyBase.isActive(ActionInfo) (src/strategies/LlamaAbsoluteStrategyBase.sol#266-269) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= approvalEndTime(actionInfo) && (isFixedLengthApprovalPeriod || ! isActionApproved(actionInfo)) (src/strategies/LlamaAbsoluteStrategyBase.sol#267-268)
LlamaAbsoluteStrategyBase.isActionExpired(ActionInfo) (src/strategies/LlamaAbsoluteStrategyBase.sol#284-287) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > action.minExecutionTime + expirationPeriod (src/strategies/LlamaAbsoluteStrategyBase.sol#286)
LlamaRelativeQuorum.isActive(ActionInfo) (src/strategies/LlamaRelativeQuorum.sol#276-279) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= approvalEndTime(actionInfo) && (isFixedLengthApprovalPeriod || ! isActionApproved(actionInfo)) (src/strategies/LlamaRelativeQuorum.sol#277-278)
LlamaRelativeQuorum.isActionExpired(ActionInfo) (src/strategies/LlamaRelativeQuorum.sol#295-298) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > action.minExecutionTime + expirationPeriod (src/strategies/LlamaRelativeQuorum.sol#297)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
LlamaAccount._readSlot0() (src/accounts/LlamaAccount.sol#338-342) uses assembly
	- INLINE ASM (src/accounts/LlamaAccount.sol#339-341)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
LlamaPolicy._initializeRole(RoleDescription) (src/LlamaPolicy.sol#393-396) has costly operations inside a loop:
	- numRoles += 1 (src/LlamaPolicy.sol#394)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Pragma version0.8.19 (src/LlamaCore.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaExecutor.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaFactory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaLens.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaPolicy.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaPolicyMetadata.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/LlamaPolicyMetadataParamRegistry.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/accounts/LlamaAccount.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/interfaces/ILlamaAccount.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/interfaces/ILlamaActionGuard.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/interfaces/ILlamaStrategy.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (src/llama-scripts/LlamaBaseScript.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (src/llama-scripts/LlamaGovernanceScript.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.19 (src/llama-scripts/LlamaSingleUseScript.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/strategies/LlamaAbsolutePeerReview.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/strategies/LlamaAbsoluteQuorum.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/strategies/LlamaAbsoluteStrategyBase.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.19 (src/strategies/LlamaRelativeQuorum.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
solc-0.8.19 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in LlamaExecutor.execute(address,uint256,bool,bytes) (src/LlamaExecutor.sol#29-35):
	- (success,result) = target.delegatecall(data) (src/LlamaExecutor.sol#34)
	- (success,result) = target.call{value: value}(data) (src/LlamaExecutor.sol#34)
Low level call in LlamaAccount.execute(address,bool,bytes) (src/accounts/LlamaAccount.sol#297-331):
	- (success,result) = target.delegatecall(callData) (src/accounts/LlamaAccount.sol#323)
	- (success,result) = target.call{value: msg.value}(callData) (src/accounts/LlamaAccount.sol#326)
Low level call in LlamaGovernanceScript.aggregate(address[],bytes[]) (src/llama-scripts/LlamaGovernanceScript.sol#62-79):
	- (success,response) = targets[i].call(data[i]) (src/llama-scripts/LlamaGovernanceScript.sol#75)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter LlamaCore.initialize(string,LlamaPolicy,ILlamaStrategy,ILlamaAccount,bytes[],bytes[])._name (src/LlamaCore.sol#225) is not in mixedCase
Parameter LlamaCore.initialize(string,LlamaPolicy,ILlamaStrategy,ILlamaAccount,bytes[],bytes[])._policy (src/LlamaCore.sol#226) is not in mixedCase
Parameter LlamaCore.initialize(string,LlamaPolicy,ILlamaStrategy,ILlamaAccount,bytes[],bytes[])._llamaStrategyLogic (src/LlamaCore.sol#227) is not in mixedCase
Parameter LlamaCore.initialize(string,LlamaPolicy,ILlamaStrategy,ILlamaAccount,bytes[],bytes[])._llamaAccountLogic (src/LlamaCore.sol#228) is not in mixedCase
Variable LlamaExecutor.LLAMA_CORE (src/LlamaExecutor.sol#12) is not in mixedCase
Parameter LlamaFactory.setPolicyMetadata(LlamaPolicyMetadata)._llamaPolicyMetadata (src/LlamaFactory.sol#197) is not in mixedCase
Variable LlamaFactory.LLAMA_CORE_LOGIC (src/LlamaFactory.sol#71) is not in mixedCase
Variable LlamaFactory.LLAMA_POLICY_LOGIC (src/LlamaFactory.sol#74) is not in mixedCase
Variable LlamaFactory.LLAMA_POLICY_METADATA_PARAM_REGISTRY (src/LlamaFactory.sol#77) is not in mixedCase
Variable LlamaFactory.ROOT_LLAMA_EXECUTOR (src/LlamaFactory.sol#80) is not in mixedCase
Variable LlamaFactory.ROOT_LLAMA_CORE (src/LlamaFactory.sol#83) is not in mixedCase
Variable LlamaLens.LLAMA_FACTORY (src/LlamaLens.sol#23) is not in mixedCase
Variable LlamaLens.LLAMA_CORE_LOGIC (src/LlamaLens.sol#26) is not in mixedCase
Variable LlamaLens.LLAMA_POLICY_LOGIC (src/LlamaLens.sol#29) is not in mixedCase
Parameter LlamaPolicy.initialize(string,RoleDescription[],RoleHolderData[],RolePermissionData[])._name (src/LlamaPolicy.sol#144) is not in mixedCase
Parameter LlamaPolicy.finalizeInitialization(address,bytes32)._llamaExecutor (src/LlamaPolicy.sol#180) is not in mixedCase
Parameter LlamaPolicyMetadataParamRegistry.setColor(LlamaExecutor,string)._color (src/LlamaPolicyMetadataParamRegistry.sol#82) is not in mixedCase
Parameter LlamaPolicyMetadataParamRegistry.setLogo(LlamaExecutor,string)._logo (src/LlamaPolicyMetadataParamRegistry.sol#90) is not in mixedCase
Variable LlamaPolicyMetadataParamRegistry.ROOT_LLAMA_EXECUTOR (src/LlamaPolicyMetadataParamRegistry.sol#41) is not in mixedCase
Variable LlamaPolicyMetadataParamRegistry.LLAMA_FACTORY (src/LlamaPolicyMetadataParamRegistry.sol#44) is not in mixedCase
Variable LlamaBaseScript.SELF (src/llama-scripts/LlamaBaseScript.sol#18) is not in mixedCase
Parameter LlamaGovernanceScript.initializeRolesAndSetRoleHolders(RoleDescription[],RoleHolderData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#87) is not in mixedCase
Parameter LlamaGovernanceScript.initializeRolesAndSetRolePermissions(RoleDescription[],RolePermissionData[])._setRolePermissions (src/llama-scripts/LlamaGovernanceScript.sol#95) is not in mixedCase
Parameter LlamaGovernanceScript.initializeRolesAndSetRoleHoldersAndSetRolePermissions(RoleDescription[],RoleHolderData[],RolePermissionData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#103) is not in mixedCase
Parameter LlamaGovernanceScript.initializeRolesAndSetRoleHoldersAndSetRolePermissions(RoleDescription[],RoleHolderData[],RolePermissionData[])._setRolePermissions (src/llama-scripts/LlamaGovernanceScript.sol#104) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndSetRoleHolders(LlamaGovernanceScript.CreateStrategies,RoleHolderData[])._createStrategies (src/llama-scripts/LlamaGovernanceScript.sol#112) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndSetRoleHolders(LlamaGovernanceScript.CreateStrategies,RoleHolderData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#113) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndInitializeRolesAndSetRoleHolders(LlamaGovernanceScript.CreateStrategies,RoleDescription[],RoleHolderData[])._createStrategies (src/llama-scripts/LlamaGovernanceScript.sol#121) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndInitializeRolesAndSetRoleHolders(LlamaGovernanceScript.CreateStrategies,RoleDescription[],RoleHolderData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#123) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndSetRolePermissions(LlamaGovernanceScript.CreateStrategies,RolePermissionData[])._createStrategies (src/llama-scripts/LlamaGovernanceScript.sol#132) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndSetRolePermissions(LlamaGovernanceScript.CreateStrategies,RolePermissionData[])._setRolePermissions (src/llama-scripts/LlamaGovernanceScript.sol#133) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndNewRolesAndSetRoleHoldersAndSetRolePermissions(LlamaGovernanceScript.CreateStrategies,RoleDescription[],RoleHolderData[],RolePermissionData[])._createStrategies (src/llama-scripts/LlamaGovernanceScript.sol#141) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndNewRolesAndSetRoleHoldersAndSetRolePermissions(LlamaGovernanceScript.CreateStrategies,RoleDescription[],RoleHolderData[],RolePermissionData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#143) is not in mixedCase
Parameter LlamaGovernanceScript.createNewStrategiesAndNewRolesAndSetRoleHoldersAndSetRolePermissions(LlamaGovernanceScript.CreateStrategies,RoleDescription[],RoleHolderData[],RolePermissionData[])._setRolePermissions (src/llama-scripts/LlamaGovernanceScript.sol#144) is not in mixedCase
Parameter LlamaGovernanceScript.revokePoliciesAndUpdateRoleDescriptions(address[],LlamaGovernanceScript.UpdateRoleDescription[])._revokePolicies (src/llama-scripts/LlamaGovernanceScript.sol#154) is not in mixedCase
Parameter LlamaGovernanceScript.revokePoliciesAndUpdateRoleDescriptions(address[],LlamaGovernanceScript.UpdateRoleDescription[])._updateRoleDescriptions (src/llama-scripts/LlamaGovernanceScript.sol#155) is not in mixedCase
Parameter LlamaGovernanceScript.revokePoliciesAndUpdateRoleDescriptionsAndSetRoleHolders(address[],LlamaGovernanceScript.UpdateRoleDescription[],RoleHolderData[])._revokePolicies (src/llama-scripts/LlamaGovernanceScript.sol#162) is not in mixedCase
Parameter LlamaGovernanceScript.revokePoliciesAndUpdateRoleDescriptionsAndSetRoleHolders(address[],LlamaGovernanceScript.UpdateRoleDescription[],RoleHolderData[])._updateRoleDescriptions (src/llama-scripts/LlamaGovernanceScript.sol#163) is not in mixedCase
Parameter LlamaGovernanceScript.revokePoliciesAndUpdateRoleDescriptionsAndSetRoleHolders(address[],LlamaGovernanceScript.UpdateRoleDescription[],RoleHolderData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#164) is not in mixedCase
Parameter LlamaGovernanceScript.setRoleHolders(RoleHolderData[])._setRoleHolders (src/llama-scripts/LlamaGovernanceScript.sol#183) is not in mixedCase
Parameter LlamaGovernanceScript.setRolePermissions(RolePermissionData[])._setRolePermissions (src/llama-scripts/LlamaGovernanceScript.sol#196) is not in mixedCase
Parameter LlamaGovernanceScript.revokePolicies(address[])._revokePolicies (src/llama-scripts/LlamaGovernanceScript.sol#208) is not in mixedCase
Variable LlamaSingleUseScript.EXECUTOR (src/llama-scripts/LlamaSingleUseScript.sol#22) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Variable LlamaLens.LLAMA_FACTORY (src/LlamaLens.sol#23) is too similar to LlamaLens.constructor(address)._llamaFactory (src/LlamaLens.sol#37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
INFO:Slither:. analyzed (40 contracts with 85 detectors), 118 result(s) found
